# -*- python -*-
# ex: set syntax=python:


# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

####### BUILDSLAVES

# the 'slaves' list defines the set of allowable buildslaves. Each element is
# a tuple of bot-name and bot-password. These correspond to values given to
# the buildslave's mktap invocation.
from buildbot.buildslave import BuildSlave
c['slaves'] = [BuildSlave("mepe-slave", "mepemepe")]

# to limit to two concurrent builds on a slave, use
#  c['slaves'] = [BuildSlave("bot1name", "bot1passwd", max_builds=2)]


# 'slavePortnum' defines the TCP port to listen on. This must match the value
# configured into the buildslaves (with their --master option)

c['slavePortnum'] = 9989

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes. Any class which implements IChangeSource can be
# put here: there are several in buildbot/changes/*.py to choose from.

from buildbot.changes.pb import PBChangeSource
c['change_source'] = PBChangeSource()

####### SCHEDULERS

## configure the Schedulers

from buildbot.scheduler import Scheduler
c['schedulers'] = []
c['schedulers'].append(Scheduler(name="test", branch="master",
                                 treeStableTimer=2*60,
                                 builderNames=["maplayers-test"]))


####### BUILDERS

# the 'builders' list defines the Builders. Each one is configured with a
# dictionary, using the following keys:
#  name (required): the name used to describe this bilder
#  slavename (required): which slave to use, must appear in c['bots']
#  builddir (required): which subdirectory to run the builder in
#  factory (required): a BuildFactory to define how the build is run
#  periodicBuildTime (optional): if set, force a build every N seconds

# buildbot/process/factory.py provides several BuildFactory classes you can
# start with, which implement build processes for common targets (GNU
# autoconf projects, CPAN perl modules, etc). The factory.BuildFactory is the
# base class, and is configured with a series of BuildSteps. When the build
# is run, the appropriate buildslave is told to execute each Step in turn.

# the first BuildStep is typically responsible for obtaining a copy of the
# sources. There are source-obtaining Steps in buildbot/steps/source.py for
# CVS, SVN, and others.


from buildbot.process import factory
from buildbot.steps.shell import Compile, ShellCommand
from buildbot.steps.source import Git
from os.path import join

SCRIPTS='../../../scripts'
BUILD_DIR=join('/','var','lib','buildbot','mepe-slave','unicef-mapping-project-ci','build')

f1 = factory.BuildFactory()

f1.addStep(ShellCommand, command=[join(SCRIPTS,'pre_build_clean.py'), BUILD_DIR])
f1.addStep(Git(repourl="git://github.com/jwishnie/unicef-project-mapping.git"))
f1.addStep(ShellCommand, command=[join(SCRIPTS,'build_setup.py')])
f1.addStep(ShellCommand, command=[join(SCRIPTS,'run_tests.py')])


b1 = {'name': "maplayers-test",
      'slavename': "mepe-slave",
      'builddir': "unicef-mapping-project-ci",
      'factory': f1,
      }
c['builders'] = [b1]


####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

c['status'] = []

from buildbot.status import html
c['status'].append(html.WebStatus(http_port=9000))

from buildbot.status import mail
c['status'].append(mail.MailNotifier(fromaddr="maplayers-buildbot@mapping.mepemepe.com",
                                     extraRecipients=["unicef-pmt-build-errors@googlegroups.com"],
                                     sendToInterestedUsers=False))

# from buildbot.status import words
# c['status'].append(words.IRC(host="irc.example.com", nick="bb",
#                              channels=["#example"]))
#
# from buildbot.status import client
# c['status'].append(client.PBListener(9988))


####### PROJECT IDENTITY

# the 'projectName' string will be used to describe the project that this
# buildbot is working on. For example, it is used as the title of the
# waterfall HTML page. The 'projectURL' string will be used to provide a link
# from buildbot HTML pages to your project's home page.

c['projectName'] = "unicef-project-mapping"
c['projectURL'] = "http://github.com/jwishnie/unicef-project-mapping" 

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.Waterfall page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = "http://mapping.mepemepe.com:9000/"
