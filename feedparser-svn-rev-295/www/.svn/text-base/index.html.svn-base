<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<title>Universal Feed Parser</title>
<link rel="stylesheet" href="css/feedparser.css" type="text/css">
<link rev="made" href="mailto:mark@diveintomark.org">
<meta name="keywords" content="RSS, Atom, CDF, XML, feed, parser, Python">
</head>
<body id="feedparser-org">
<!--#include virtual="/inc/header.html" -->
<div id="main">
<div id="mainInner">

<p>TODO_date: feedparser 4.2 is finally here!  <a href="docs/changes-42.html">See what's new in 4.2</a>.</p>
<p><a class="plain" href="TODO"><img src="img/download-42.png" alt="[download version 4.2]" width="200" height="70"></a></p>
<h2 class="skip"><span>Getting started</span></h2>
<div class="example">
<pre class="screen"><samp class="prompt">>>> </samp><span class="userinput"><span class='pykeyword'>import</span> feedparser</span>
<samp class="prompt">>>> </samp><span class="userinput">d = feedparser.parse(<span class='pystring'>"<a href="http://feedparser.org/docs/examples/atom10.xml">http://feedparser.org/docs/examples/atom10.xml</a>"</span>)</span>
<samp class="prompt">>>> </samp><span class="userinput">d['feed']['title']</span>             <span class="pycomment"># feed data is a dictionary</span>
<span class="computeroutput">u'Sample Feed'</span>
<samp class="prompt">>>> </samp><span class="userinput">d.feed.title</span>                   <span class="pycomment"># get values attr-style or dict-style</span>
<span class="computeroutput">u'Sample Feed'</span>
<samp class="prompt">>>> </samp><span class="userinput">d.channel.title</span>                <span class="pycomment"># use RSS or Atom terminology anywhere</span>
<span class="computeroutput">u'Sample Feed'</span>
<samp class="prompt">>>> </samp><span class="userinput">d.feed.link</span>                    <span class="pycomment"># resolves relative links</span>
<span class="computeroutput">u'http://example.org/'</span>
<samp class="prompt">>>> </samp><span class="userinput">d.feed.subtitle</span>                 <span class="pycomment"># parses escaped HTML</span>
<span class="computeroutput">u'For documentation &lt;em>only&lt;/em>'</span>
<samp class="prompt">>>> </samp><span class="userinput">d.channel.description</span>          <span class="pycomment"># RSS terminology works here too</span>
<span class="computeroutput">u'For documentation &lt;em>only&lt;/em>'</span>
<samp class="prompt">>>> </samp><span class="userinput">len(d['entries'])</span>              <span class="pycomment"># entries are a list</span>
<span class="computeroutput">1</span>
<samp class="prompt">>>> </samp><span class="userinput">d['entries'][0]['title']</span>       <span class="pycomment"># each entry is a dictionary</span>
<span class="computeroutput">u'First entry title'</span>
<samp class="prompt">>>> </samp><span class="userinput">d.entries[0].title</span>             <span class="pycomment"># attr-style works here too</span>
<span class="computeroutput">u'First entry title'</span>
<samp class="prompt">>>> </samp><span class="userinput">d['items'][0].title</span>            <span class="pycomment"># RSS terminology works here too</span>
<span class="computeroutput">u'First entry title'</span>
<samp class="prompt">>>> </samp><span class="userinput">e = d.entries[0]</span>
<samp class="prompt">>>> </samp><span class="userinput">e.link</span>                         <span class="pycomment"># easy access to alternate link</span>
<span class="computeroutput">u'http://example.org/entry/3'</span>
<samp class="prompt">>>> </samp><span class="userinput">e.links[1].rel</span>                 <span class="pycomment"># full access to all Atom links</span>
<span class="computeroutput">u'related'</span>
<samp class="prompt">>>> </samp><span class="userinput">e.links[0].href</span>                <span class="pycomment"># resolves relative links here too</span>
<span class="computeroutput">u'http://example.org/entry/3'</span>
<samp class="prompt">>>> </samp><span class="userinput">e.author_detail.name</span>           <span class="pycomment"># author data is a dictionary</span>
<span class="computeroutput">u'Mark Pilgrim'</span>
<samp class="prompt">>>> </samp><span class="userinput">e.updated_parsed</span>              <span class="pycomment"># parses all date formats</span>
<span class="computeroutput">(2005, 11, 9, 11, 56, 34, 2, 313, 0)</span>
<samp class="prompt">>>> </samp><span class="userinput">e.content[0].value</span>             <span class="pycomment"># sanitizes dangerous HTML</span>
<span class="computeroutput">u'&lt;div>Watch out for &lt;em>nasty tricks&lt;/em>&lt;/div>'</span>
<samp class="prompt">>>> </samp><span class="userinput">d.version</span>                      <span class="pycomment"># reports feed type and version</span>
<span class="computeroutput">u'atom10'</span>
<samp class="prompt">>>> </samp><span class="userinput">d.encoding</span>                     <span class="pycomment"># auto-detects character encoding</span>
<span class="computeroutput">u'utf-8'</span>
<samp class="prompt">>>> </samp><span class="userinput">d.headers.get('Content-type')</span>  <span class="pycomment"># full access to all HTTP headers</span>
<span class="computeroutput">u'application/xml'</span>
</pre>
</div> <!-- example -->

<hr style="clear:both">
<div style="font-variant: small-caps;"><p>Like the parser?  <a title="also available in grey, white, green, and pink" href="http://www.cafepress.com/feedparser">Buy the t-shirt!</a></p><p><a style="border: 0 !important; text-decoration: none !important;" title="also available in grey, white, green, and pink" href="http://www.cafepress.com/feedparser"><img src="/img/feedparser.jpg" alt="[I support RFC 3023 t-shirt]" title="also available in grey, white, green, and pink" width="150" height="150"></a></p></div><div class="footer"><p class="copyright">Copyright &copy; 2002-2008 Mark Pilgrim</p></div>
</div> <!-- mainInner -->
</div> <!-- main -->

</body>
</html>
